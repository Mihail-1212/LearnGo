// Создание build exe из .go файла
// @param => main.go - название файла для компиляции
go build main.go

// Компиляция и последующий запуск .go файла
// @param => main.go - название файла для компиляции
go run main.go

// Объявление пакета (представлен главный пакет, который и будет скомпилирован в файл)
package main

// Объявление функции
func main () {}

// Функция, которая имеет такое же название как и пакет запсукается автоматически

package main

func main () {}

// Импорт сторонних модулей

import "fmt"	// Название модуля обязательно должно быть в двойных кавычках

// Импорт несокльких модулей

import "fmt"
import "time" 

// Или

import (
	"fmt"
	"time"
)

// Использование аллиасов

import t "time"	// t - аллиас

// Создание константы

const str = "Строка тут"	// Указывать тип константы не обязательно

/*
Типы данных:
	int,	- целые числа
	float,	- числа с плавающей точкой
	complex	- комплексные числа
	bool,
	int8,
	int16,
	int32,
	int64,
	uint8
	...
	string,	- строка
*/

// Автоматическое приведение типа (не нужно указывать тип переменной он ставится сам)
length := 0
var width = 15

// Дефолтный int тип выбирается из двух: int32 и int64 в зависимости от архитектуры операционной системы

var a int = 10 // будет int64 (у меня 64-битная система)

// В go есть оператор сложения с текущей переменной и последующее присваивание
a += 10
// Есть подобные операторы для других операций (*=, /=, -=)

// Множественное инициализация переменных

var s1, s2 string

checked, stringito := true, "bababoy"

// if-else - круглые скобки являются необязательными, но лучше использовать для читаемости кода
if (true) {

} else {

}

// Также работает такая структура

if(a == 0){

} else if (a > 10) {

} else {

}

// Существует структура switch-case, не нужно добавлять кл. слова break

switch (a) {
	case 10:

	case 11:
		
	default:
}


// быстрое объявление переменной внутри оператора switch - данная переменная будет доступна только в пределах блока switch

switch number := 10; (number) {
	case 10:

	case 11:
		
	default: 
}

// то же самое можно использовать с оператором if

if check := 10 != a; (check) {

}

// Найти адрес переменной в ОП, где x - переменная
&x 	// вернет 0x414020

// Адреса
var addressA *int	// Хранит адрес переменной с int значением
addressA = &x

// Косвенное обращение или разыменование
// По адресу можно обратиться и поменять значение переменной
*addressA = 500	// Изменит переменную x
// Можно передавать указатель параметром функции
func del(str *string) {
	str += " deleted"
}