// Объявление функции
func main() {

}

// Возвращает данные
func get() string {
	return "qq"
}

// Множественные возвращаемые значения
func get2() (int, int) {
	return 1, 2
}

// Получение множественных значений

var a, b int
a, b = get2()

// Испольщование параметров функции
func set(x, y int16) int16 {
	return x * y
}

// Отсрочка разрешения
// Тело после defer выполняется при завершении выполнения команд в данной области
func testDefer() {
	defer get()	// Ключевое слово defer
	a := 10
	a += 20
}

// При неопределенном количестве параметров одного типа в теле параметров нужно указать ...
func Sum(numbers ...int) {
	var sum int = 0
	for _, number := range numbers{
        sum += number
    }
	fmt.Println("sum = ", sum)
}

// Нужно передавать параметрами именно отдельные переменные/литералы а не срез массива
Sum(1,2,3,4)

// Если нужно передать срез массива, то в скобках после переменной нужно ставить ...int
numbers2 := [...]int{1,2,3} 
Sum(numbers2...)

// Функция имеет свой тип данных, например
func fun(x, y int) int {
	return x + y
}

// Даная функция имеет тип func(int, int) int
// Следовательно переменные могут быть функциями, то есть
var f func(int, int) int = fun
var x = f(2, 2)

// Следовательно функция может передаваться другой функции в качестве аргумента
func check(a int, operation func(int, int) int) {
	var sum = operation(a, a)
}

check(1, fun)

// А также функция может возвращаться в результате операции
// Анонимные функции
f := func(x, y int) int{ return x + y}

// Оператор panic позволяет сгенерировать ошибку и выйти из программы
if y == 0{ 
	panic("Division by zero!")
}
// При возникновении ошибки останавливается программа